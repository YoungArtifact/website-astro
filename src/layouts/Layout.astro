---
import "@/styles/globals.css";
import { ModeToggle } from "@/components/ModeToggle";
import { Separator } from "@/components/ui/separator";
import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html
  lang="en"
  transition:name="root"
  transition:animate="none"
>
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Astro description"
    />
    <meta
      name="viewport"
      content="width=device-width"
    />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicon.svg"
    />
    <meta
      name="generator"
      content={Astro.generator}
    />
    <title>{title}</title>
    <ClientRouter />
  </head>
  <body>
    <main>
      <ModeToggle client:load />
      <Separator className="my-4" />
      <slot />
    </main>
    <div class="camera">
      <div class="background"></div>
    </div>
    <div class="dpad">
      <div class="DemoDirectionUI flex-center">
        <button class="dpad-button dpad-left">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 -0.5 13 13"
            shape-rendering="crispEdges"
          >
            <path
              class="Arrow_outline-top"
              stroke="#5f5f5f"
              d="M1 0h11M0 1h1M12 1h1M0 2h1M12 2h1M0 3h1M12 3h1M0 4h1M12 4h1M0 5h1M12 5h1M0 6h1M12 6h1M0 7h1M12 7h1M0 8h1M12 8h1"
            ></path>
            <path
              class="Arrow_surface"
              stroke="#f5f5f5"
              d="M1 1h11M1 2h11M1 3h5M7 3h5M1 4h4M7 4h5M1 5h3M7 5h5M1 6h4M7 6h5M1 7h5M7 7h5M1 8h11"
            ></path>
            <path
              class="Arrow_arrow-inset"
              stroke="#434343"
              d="M6 3h1M5 4h1M4 5h1"
            ></path>
            <path
              class="Arrow_arrow-body"
              stroke="#5f5f5f"
              d="M6 4h1M5 5h2M5 6h2M6 7h1"
            ></path>
            <path
              class="Arrow_outline-bottom"
              stroke="#434343"
              d="M0 9h1M12 9h1M0 10h1M12 10h1M0 11h1M12 11h1M1 12h11"
            ></path>
            <path
              class="Arrow_edge"
              stroke="#ffffff"
              d="M1 9h11"
            ></path>
            <path
              class="Arrow_front"
              stroke="#cccccc"
              d="M1 10h11M1 11h11"
            ></path>
          </svg>
        </button>
        <button class="dpad-button dpad-right">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 -0.5 13 13"
            shape-rendering="crispEdges"
          >
            <path
              class="Arrow_outline-top"
              stroke="#5f5f5f"
              d="M1 0h11M0 1h1M12 1h1M0 2h1M12 2h1M0 3h1M12 3h1M0 4h1M12 4h1M0 5h1M12 5h1M0 6h1M12 6h1M0 7h1M12 7h1M0 8h1M12 8h1"
            ></path>
            <path
              class="Arrow_surface"
              stroke="#f5f5f5"
              d="M1 1h11M1 2h11M1 3h5M7 3h5M1 4h5M8 4h4M1 5h5M9 5h3M1 6h5M8 6h4M1 7h5M7 7h5M1 8h11"
            ></path>
            <path
              class="Arrow_arrow-inset"
              stroke="#434343"
              d="M6 3h1M7 4h1M8 5h1"
            ></path>
            <path
              class="Arrow_arrow-body"
              stroke="#5f5f5f"
              d="M6 4h1M6 5h2M6 6h2M6 7h1"
            ></path>
            <path
              class="Arrow_outline-bottom"
              stroke="#434343"
              d="M0 9h1M12 9h1M0 10h1M12 10h1M0 11h1M12 11h1M1 12h11"
            ></path>
            <path
              class="Arrow_edge"
              stroke="#ffffff"
              d="M1 9h11"
            ></path>
            <path
              class="Arrow_front"
              stroke="#cccccc"
              d="M1 10h11M1 11h11"
            ></path>
          </svg>
        </button>
      </div>
    </div>
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }

  var background = document.querySelector(".background");

  //start in the middle of the map
  var x = -screen.width / 3;
  var y = 34;
  var held_directions = []; //State of which arrow keys we are holding down
  var speed = screen.width / 2; //How fast the character moves in pixels per frame
  const placeCharacter = () => {
    var pixelSize = parseInt(
      getComputedStyle(document.documentElement).getPropertyValue(
        "--pixel-size"
      )
    );

    const held_direction = held_directions[0];
    if (held_direction) {
      if (held_direction === directions.right) {
        x += speed;
      }
      if (held_direction === directions.left) {
        x -= speed;
      }
      if (held_direction === directions.down) {
        y += speed;
      }
      if (held_direction === directions.up) {
        y -= speed;
      }
    }

    background.style.transform = `translate3d( ${-x * pixelSize}px, ${-y * pixelSize}px, 0 )`;
  };

  //Set up the game loop
  const step = () => {
    placeCharacter();
    window.requestAnimationFrame(() => {
      step();
    });
  };
  step(); //kick off the first step!

  /* Direction key state */
  const directions = {
    up: "up",
    down: "down",
    left: "left",
    right: "right",
  };

  var isPressed = false;
  const removePressedAll = () => {
    document.querySelectorAll(".dpad-button").forEach((d) => {
      d.classList.remove("pressed");
    });
  };
  document.body.addEventListener("mousedown", () => {
    isPressed = true;
  });
  document.body.addEventListener("mouseup", () => {
    isPressed = false;
    held_directions = [];
    removePressedAll();
  });
  const handleDpadPress = (direction, click) => {
    console.log(direction);
    if (click) {
      isPressed = true;
    }
    held_directions = isPressed ? [direction] : [];

    if (isPressed) {
      removePressedAll();
      document.querySelector(".dpad-" + direction).classList.add("pressed");
    }
  };
  //Bind a ton of events for the dpad
  document
    .querySelector(".dpad-left")
    .addEventListener("mousedown", (e) =>
      handleDpadPress(directions.left, true)
    );
  document
    .querySelector(".dpad-right")
    .addEventListener("mousedown", (e) =>
      handleDpadPress(directions.right, true)
    );
</script>

<style>
  :root {
    --pixel-size: 1px;
    --grid-cell: calc(var(--pixel-size) * 16);
  }

  main {
    margin: auto;
    padding: 1rem;
    width: 90%;
    max-width: calc(100% - 2rem);
    font-size: 20px;
    line-height: 1.6;
  }

  .camera {
    width: 100%;
    height: 100%;
    overflow-x: hidden;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -100;
  }

  .background {
    image-rendering: pixelated;
    background-image: url(Sample.png);
    background-repeat: no-repeat;
    width: calc(26 * var(--grid-cell));
    height: calc(20 * var(--grid-cell));
    position: relative;
  }

  .dpad {
    position: absolute;
    right: calc(var(--pixel-size) * 4);
    bottom: calc(var(--pixel-size) * 4);
    width: calc(var(--pixel-size) * 74);
    height: calc(var(--pixel-size) * 76);
  }
  .dpad-button {
    appearance: none;
    outline: 0;
    border: 0;
    background: transparent;
    padding: 0;
    cursor: pointer;
  }
  .dpad-button svg {
    display: block;
    height: calc(var(--pixel-size) * 26);
  }

  .dpad-button.pressed .Arrow_arrow-inset {
    stroke: #07c2cc;
  }
  .dpad-button.pressed .Arrow_arrow-body {
    stroke: #17dfea;
  }

  .dpad-left {
    position: absolute;
    top: calc(var(--pixel-size) * 12);
    left: 0;
  }
  .dpad-right {
    position: absolute;
    top: calc(var(--pixel-size) * 12);
    right: 0;
  }

  .dpad {
    user-select: none;
  }
</style>
